from flask import Flask, jsonify, request, send_fileimport jsonfrom datetime import datetimeimport matplotlib.pyplot as pltfrom jobs import rd, add_job,return_job, return_imageapp = Flask(__name__)stocks = json.loads(rd.get("Stocks"))    @app.route('/', methods=['GET'])def instructions():    return """    Try these routes:        /                 informational    /stock/<ticker>?period=   gives you a graph with a 5 year history    /stock/<ticker>/date gives you the closing price of that particular date    /stock/diff?start=&end= gives you the % change between the dates of the stock    /stock/compare/<ticker1>/<ticker2>?period= compares two stocks with each other        /run              (GET) job instructions    /run              (POST) submit job    /jobs             get list of past jobs    /jobs/<UUID>      get job results    /delete           (GET) delete instructions    /delete           (DELETE) delete job    /download/<UUID>  download img from job """@app.route('/stock/<string:ticker>', methods=['POST'])def stock_graph(ticker):    job_type = 'graph'    input_values = {'ticker': ticker}        return add_job(job_type, json.dumps(input_values))    #Date must be in a %Y-%m-%d format@app.route('/stock/<string:ticker>/<string:date>', methods=['GET'])def stock_point(ticker, date):    my_stock = stocks[ticker]        return jsonify(my_stock[date])@app.route('/stock/compare/<string:ticker1>/<string:ticker2>', methods=['POST'])def compare_stock(ticker1, ticker2):    job_type = 'compare'    input_values = {'ticker1': ticker1, 'ticker2': ticker2}        return add_job(job_type, json.dumps(input_values))@app.route('/jobs/<string:uid>', methods=['GET'])def get_job(uid):    return_dict = return_job(uid)    return return_dict@app.route('/download/<jobid>', methods=['GET'])def download(jobid):        path = '{}.png'.format(jobid)    with open(path, 'wb') as f:        f.write(return_image(jobid))    return send_file(path, mimetype='image/png', as_attachment=True)if __name__ == '__main__':    app.run(debug=True, host='0.0.0.0')