from flask import Flask, jsonify, request, send_fileimport jsonfrom datetime import datetimeimport matplotlib.pyplot as pltfrom jobs import rd, add_job,return_job, return_image,rdsfrom funcs import get_stock_diff, validateapp = Flask(__name__)stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]accepted_periods = ['1d', '7d', '1m', '3m', '6m', '1y', '5y']    @app.route('/', methods=['GET'])def instructions():    return """    Try these routes:        /                 informational    /stock/<ticker>?period=   gives you a graph with a 5 year history    /stock/<ticker>/date gives you the closing price of that particular date    /stock/diff?start=&end= gives you the % change between the dates of the stock    /stock/compare/<ticker1>/<ticker2>?period= compares two stocks with each other        /run              (GET) job instructions    /run              (POST) submit job    /jobs             get list of past jobs    /jobs/<UUID>      get job results    /delete           (GET) delete instructions    /delete           (DELETE) delete job    /download/<UUID>  download img from job """#Date must be in a %Y-%m-%d format@app.route('/stock/<string:ticker>', methods=['GET'])def stock_point(ticker):    stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker not in stock_tickers:        return 'Please enter a valid ticker\n', 404        my_stock = json.loads(rds.get(ticker))    date = request.args.get('date')        if date:        if date not in my_stock:            return 'Either you need a date format in %Y-%m-%d or your date is invalid', 404        else:            return jsonify(date + ': ' + str(my_stock[date]))    else:        return jsonify(my_stock)    @app.route('/stock/diff/<string:ticker>/<string:period>', methods=['GET'])def stock_diff(ticker, period):    stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker not in stock_tickers:        return 'Please enter a valid ticker\n', 404        stock = json.loads(rds.get(ticker))        try:        result = get_stock_diff(stock, period)        return jsonify(result)    except:        return "Enter a valid period\n", 404    @app.route('/stock/add', methods=['POST'])def add_point():    try:        job = request.get_json(force=True)    except Exception as e:        return True, json.dumps({'status': "Error", 'message': 'Invalid JSON: {}.'.format(e)})        ticker = job['ticker']    date = validate(job['date'])    value = job['value']        stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker not in stock_tickers:        return 'Please enter a valid ticker\n', 404        my_stock = json.loads(rds.get(ticker))    if date and value:        my_stock[date] = float(value)    else:        return 'Please enter check spelling for date and value\n', 404        rds.set(ticker, json.dumps(my_stock))        return "Data point created for " + ticker + ': ' + date + ':' + str(value)@app.route('/stock/graph', methods=['POST'])def stock_graph():    try:        job = request.get_json(force=True)    except Exception as e:        return True, json.dumps({'status': "Error", 'message': 'Invalid JSON: {}.'.format(e)})        ticker = job['ticker']    stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker not in stock_tickers:        return 'Please enter a valid ticker\n', 404        period = job['period']        if period not in accepted_periods:        raise Exception("period needs to be in accepted period list: ['1d', '7d', '1m', '3m', '6m', '1y', '5y']")        job_type = 'graph'    input_values = {'ticker': ticker, "period": period}        return add_job(job_type, json.dumps(input_values))@app.route('/stock/compare', methods=['POST'])def compare_stock():    try:        job = request.get_json(force=True)    except Exception as e:        return True, json.dumps({'status': "Error", 'message': 'Invalid JSON: {}.'.format(e)})    ticker1 = job['ticker1']    ticker2 = job['ticker2']    stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker1 not in stock_tickers or ticker2 not in stock_tickers:        return 'Please enter a valid ticker\n', 404        period = job['period']    if period not in accepted_periods:        raise Exception("period needs to be in accepted period list: ['1d', '7d', '1m', '3m', '6m', '1y', '5y']")            job_type = 'compare'    input_values = {'ticker1': ticker1, 'ticker2': ticker2, "period": period}        return add_job(job_type, json.dumps(input_values))@app.route('/stock/compare_sp500', methods=['POST'])def sp500_compare():    try:        job = request.get_json(force=True)    except Exception as e:        return True, json.dumps({'status': "Error", 'message': 'Invalid JSON: {}.'.format(e)})        ticker = job['ticker']    stock_tickers = [ticker.decode('utf-8') for ticker in rds.keys()]    if ticker not in stock_tickers:        return 'Please enter a valid ticker\n', 404        period = job['period']        if period not in accepted_periods:        raise Exception("period needs to be in accepted period list: ['1d', '7d', '1m', '3m', '6m', '1y', '5y']")        job_type = 'sp500'    input_values = {'ticker': ticker, 'period': period}        return add_job(job_type, json.dumps(input_values))    @app.route('/jobs/<string:uid>', methods=['GET'])def get_job(uid):    return_dict = return_job(uid)    return return_dict@app.route('/download/<string:jobid>', methods=['GET'])def download(jobid):        path = '{}.png'.format(jobid)    with open(path, 'wb') as f:        f.write(return_image(jobid))    return send_file(path, mimetype='image/png', as_attachment=True)if __name__ == '__main__':    print(stock_tickers)    app.run(debug=True, host='0.0.0.0')